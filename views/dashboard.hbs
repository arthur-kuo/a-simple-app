<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .error-message {
            color: red;
            display: none;
        }
        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .stat-card h3 {
            margin: 0 0 10px 0;
            color: #666;
            font-size: 0.9em;
        }
        .stat-card .value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }
        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .users-table th,
        .users-table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }
        .users-table th {
            background-color: #f5f5f5;
            font-weight: bold;
        }
        .users-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .users-table tr:hover {
            background-color: #f5f5f5;
        }
        .datetime {
            white-space: nowrap;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <h1>Dashboard</h1>
        
        <!-- User Profile Section -->
        <div class="section" id="user-profile">
            <h2>User Profile</h2>
            <div id="user-info"></div>
            
            <form id="update-name-form">
                <h3>Update Name</h3>
                <input type="text" id="new-name" required>
                <button type="submit">Update Name</button>
                <p id="name-error" class="error-message"></p>
            </form>

            <form id="update-password-form">
                <h3>Change Password</h3>
                <input type="password" id="old-password" placeholder="Old Password" required>
                <input type="password" id="new-password" placeholder="New Password" required>
                <input type="password" id="confirm-password" placeholder="Confirm New Password" required>
                <button type="submit">Update Password</button>
                <p id="password-error" class="error-message"></p>
            </form>
        </div>

        <!-- Statistics Section -->
        <div class="section">
            <h2>User Statistics</h2>
            <div class="stats-cards" id="stats-cards">
                <div class="stat-card">
                    <h3>Total Users</h3>
                    <div class="value" id="total-users">-</div>
                </div>
                <div class="stat-card">
                    <h3>Active Sessions Today</h3>
                    <div class="value" id="active-today">-</div>
                </div>
                <div class="stat-card">
                    <h3>7-Day Average Active Sessions</h3>
                    <div class="value" id="avg-active">-</div>
                </div>
            </div>
        </div>

        <!-- Users List Section -->
        <div class="section">
            <h2>User Database</h2>
            <div class="table-responsive">
                <table class="users-table">
                    <thead>
                        <tr>
                            <th>Email</th>
                            <th>Name</th>
                            <th>Sign Up Date</th>
                            <th>Login Count</th>
                            <th>Last Session</th>
                        </tr>
                    </thead>
                    <tbody id="users-list">
                        <!-- Users will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>

        <button id="logout-btn">Logout</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // First check URL parameters for token
        const urlParams = new URLSearchParams(window.location.search);
        const urlToken = urlParams.get('token');
        
        // If token exists in URL, save it and clean URL
        if (urlToken) {
            localStorage.setItem('token', urlToken);
            window.history.replaceState({}, document.title, '/dashboard');
        }

        // Get token from localStorage
        const token = localStorage.getItem('token');

        // If no token is found, redirect to login page
        if (!token) {
            window.location.href = '/';
            return;
        }

        function formatDate(dateString) {
            const options = {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            };
            return new Date(dateString).toLocaleString('en-US', options);
        }

        // Load dashboard data
        async function loadDashboard() {
            try {
                let userId;
                try {
                    userId = JSON.parse(atob(token.split('.')[1])).userId;
                } catch (error) {
                    console.error('Invalid token format:', error);
                    localStorage.removeItem('token');
                    window.location.href = '/';
                    return;
                }
                
                // Fetch user info
                const userResponse = await fetch(`/api/users/${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                // If unauthorized, redirect to login
                if (userResponse.status === 401) {
                    localStorage.removeItem('token');
                    window.location.href = '/';
                    return;
                }

                const userData = await userResponse.json();
                
                // Display user info
                document.getElementById('user-info').innerHTML = `
                    <p>Name: ${userData.name}</p>
                    <p>Email: ${userData.email}</p>
                `;

                // Fetch stats
                const statsResponse = await fetch('/api/users/dashboard/stats', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const statsData = await statsResponse.json();
                
                // Update statistics cards
                document.getElementById('total-users').textContent = statsData.totalUsers;
                document.getElementById('active-today').textContent = statsData.activeSessionsToday;
                document.getElementById('avg-active').textContent = statsData.avgActiveSessions;

                // Fetch users list
                const usersResponse = await fetch('/api/users/dashboard', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                const usersData = await usersResponse.json();
                
                // Populate users table
                const usersList = document.getElementById('users-list');
                usersList.innerHTML = usersData.map(user => `
                    <tr>
                        <td>${user.email}</td>
                        <td>${user.name}</td>
                        <td class="datetime">${formatDate(user.createdAt)}</td>
                        <td>${user.loginCount}</td>
                        <td class="datetime">${user.lastSession ? formatDate(user.lastSession) : 'Never'}</td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error loading dashboard:', error);
                // If there's an error, show a message to the user
                document.querySelector('.dashboard-container').innerHTML = `
                    <h1>Dashboard</h1>
                    <p style="color: red;">Error loading dashboard data. Please try logging in again.</p>
                    <button onclick="window.location.href='/'">Return to Login</button>
                `;
            }
        }

        // Initial load
        loadDashboard();


        // Update name handler
        document.getElementById('update-name-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = JSON.parse(atob(token.split('.')[1])).userId;
            const errorElement = document.getElementById('name-error');
            
            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        name: document.getElementById('new-name').value
                    })
                });

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error);
                }

                loadDashboard();
                errorElement.style.display = 'none';
            } catch (error) {
                errorElement.textContent = error.message;
                errorElement.style.display = 'block';
            }
        });

        // Update password handler
        document.getElementById('update-password-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = JSON.parse(atob(token.split('.')[1])).userId;
            const errorElement = document.getElementById('password-error');
            
            try {
                const response = await fetch(`/api/users/${userId}/reset-password`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        oldPassword: document.getElementById('old-password').value,
                        newPassword: document.getElementById('new-password').value,
                        confirmPassword: document.getElementById('confirm-password').value
                    })
                });

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error);
                }

                document.getElementById('update-password-form').reset();
                errorElement.style.display = 'none';
                alert('Password updated successfully');
            } catch (error) {
                errorElement.textContent = error.message;
                errorElement.style.display = 'block';
            }
        });

        // Logout handler
        document.getElementById('logout-btn').addEventListener('click', async () => {
            try {
                await fetch('/api/users/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                localStorage.removeItem('token');
                window.location.href = '/';
            } catch (error) {
                console.error('Logout error:', error);
            }
        });
    });
    </script>
</body>
</html>